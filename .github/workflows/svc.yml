name: svc

concurrency:
  group: ${{github.workflow}}-${{github.event_name}}


#--------------------------------------------------#
#                     Triggers                     # 
#--------------------------------------------------#
on:

  workflow_call:
    inputs:
      mainBranch:
        type: string
        required: false
        default: master
        description: "Main repository branch may interfere with versioning"
      ecosystem:
        type: string
        required: false
        description: "Special prefix that will be added to the image name"
      containerRegistry:
        type: string
        required: false
        default: ghcr.io
        description: "Container registry to upload container images"
      environmentsAsNamespaces:
        type: boolean
        required: false
        default: false
        description: "Separate environments as namespaces"
      staticAnalysis:
        type: boolean
        required: false
        default: true
        description: "Enable static analysis scans"
      autoVersioning:
        type: boolean
        required: false
        default: true
        description: "Enable auto versioning with semantic versioning"
      nodeMatrix:
        type: string
        required: false
        default: '[14, 16, 17]'
      nodeVersion:
        type: string
        required: false
        default: '17'
      pythonMatrix:
        type: string
        required: false
        default: '["3.8", "3.9", "3.10"]'
      pythonVersion:
        type: string
        required: false
        default: '3.10'
      platforms:
        type: string
        required: false
        default: "linux/386,linux/amd64,linux/arm/v7,linux/arm/v8,linux/arm64,linux/ppc64le,linux/s390x"
        description: "Multi-plataform container builds"


#--------------------------------------------------#
#                  Workflow Jobs                   # 
#--------------------------------------------------#
jobs:

  #--------------------------------------------------#
  #                    Setup Jobs                    # 
  #--------------------------------------------------#
  Setup:
    runs-on: ubuntu-latest

    outputs:
      Event: ${{steps.analysis.outputs.event}}
      Analysis: ${{steps.analysis.outputs.result}}
      Language: ${{steps.analysis.outputs.language}}
      Environment: ${{steps.analysis.outputs.environment}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}

      # job
      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          writeSummary: true
          containerRegistry: ${{inputs.containerRegistry}}
          # evaluateSecrets: true
          SECRET_KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          SECRET_REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          SECRET_REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          SECRET_PIPELINE_DEPLOY_TOKEN: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}


  #--------------------------------------------------#
  #                  Static Analysis                 # 
  #--------------------------------------------------#
  Static-Analysis:
    runs-on: ubuntu-latest
    if: needs.Setup.outputs.Event == 'push'
    
    needs: Setup

    permissions:
      security-events: write

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      #job
      - name: Run code analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-static-code-analysis@main
        if: inputs.staticAnalysis
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
          language: ${{needs.Setup.outputs.Language}}


  #--------------------------------------------------#
  #                  Tests: Node.js                  # 
  #--------------------------------------------------#
  Tests-Node:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.Language == 'javascript'

    permissions:
      security-events: write

    strategy:
      matrix:
        node-version: ${{fromJSON(inputs.nodeMatrix)}}
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Install | Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}

      - name: Install | Dependency managers
        run: npm -g install yarn npm

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{needs.Setup.outputs.PipelineConfig}}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"

      # load caches
      - name: Load cache from yarn.lock
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'yarn.lock'
        with:
          path: '**/node_modules'
          key: ${{runner.os}}-modules-${{hashFiles('**/yarn.lock')}}

      - name: Load cache from package-lock.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{runner.os}}-modules-${{hashFiles('**/package-lock.json')}}

      - name: Load cache from package.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{runner.os}}-modules-${{hashFiles('**/package.json')}}

      # install dependencies
      - name: Install dependencies
        run: |
          if test -f ./yarn.lock; then yarn; fi
          if test -f ./package-lock.json; then npm install; fi

      # run scripts
      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test --if-present


  #--------------------------------------------------#
  #                  Tests: Python                   # 
  #--------------------------------------------------#
  Tests-Python:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.Language == 'python'

    strategy:
      matrix:
        python-version: ${{fromJSON(inputs.pythonMatrix)}}
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          python: ${{matrix.python-version}}

      - name: Pip install
        run: pip install --upgrade -r requirements.txt


  #--------------------------------------------------#
  #                  Tests: Go                       #
  #--------------------------------------------------#
  Tests-Go:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.Language == 'go'
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
    
      - name: Download dependencies
        run: go mod download

  #--------------------------------------------------#
  #                 Release: Node.js                 # 
  #--------------------------------------------------#
  Release-Node:
    runs-on: ubuntu-latest
    needs:
      - Tests-Node
      - Static-Analysis

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        env:
          GITHUB_TOKEN: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
        with:
          installNode: true
          writeSummary: true
          defaultBranch: ${{inputs.mainBranch}}
          files: '["package.json","dist/**/*.{js,css}"]'
          npmPlugin: true

      - name: Current Version
        id: versioning
        run: |
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"
          echo -e "\n\nINFO  current version = $(cat package.json | jq -r '.version')\n\n"


  #--------------------------------------------------#
  #                 Release: Python                  # 
  #--------------------------------------------------#
  Release-Python:
    runs-on: ubuntu-latest
    needs:
      - Tests-Python
      - Static-Analysis

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        env:
          GITHUB_TOKEN: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
        with:
          defaultBranch: ${{inputs.mainBranch}}
          files: '[]'
          npmPlugin: false

      - name: Next Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "::set-output name=version::$NEXT_VERSION"


  #--------------------------------------------------#
  #                 Release: Go                      # 
  #--------------------------------------------------#
  Release-Go:
    runs-on: ubuntu-latest
    needs:
      - Tests-Go
      - Static-Analysis

    outputs:
      Version: ${{steps.versioning.outputs.version}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      # release
      - name: Install dependencies
        run: yarn install
    
      # - name: Semantic Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}
      #   run: npx semantic-release --branches ${{ inputs.mainBranch }}

      - name: Semantic Release
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}

      - name: Next Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          NEXT_VERSION=0.0.0
          echo "::set-output name=version::$NEXT_VERSION"


  #--------------------------------------------------#
  #                      Trigger JS                  # 
  #--------------------------------------------------#
  Trigger-Build-Node:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: 
      - Release-Node

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "${{steps.analysis.outputs.commiter_name}}"
          git config --global user.email "${{steps.analysis.outputs.commiter_email}}"
          git fetch
          git checkout -B env/dev
          git commit --allow-empty -am "deploy: to dev [skip ci]\\nVersion: ${{needs.Release-Node.outputs.Version}}\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/dev

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: dev


  #--------------------------------------------------#
  #                      Trigger PY                  # 
  #--------------------------------------------------#
  Trigger-Build-Python:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: 
      - Release-Python

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "${{steps.analysis.outputs.commiter_name}}"
          git config --global user.email "${{steps.analysis.outputs.commiter_email}}"
          git fetch
          git checkout -B env/dev
          git commit --allow-empty -am "deploy: to dev [skip ci]\\nVersion: ${{needs.Release-Python.outputs.Version}}\nCommit: ${{steps.analysis.outputs.commit_hash}}"
          git push -f -u origin env/dev

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: dev


  #--------------------------------------------------#
  #                      Trigger Go                  # 
  #--------------------------------------------------#
  Trigger-Build-Go:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: 
      - Release-Go

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "${{steps.analysis.outputs.commiter_name}}"
          git config --global user.email "${{steps.analysis.outputs.commiter_email}}"
          git fetch
          git checkout -B env/dev
          git commit --allow-empty -am "deploy: to dev [skip ci]\\nVersion: ${{needs.Release-Python.outputs.Version}}\nCommit: ${{steps.analysis.outputs.commit_hash}}"
          git push -f -u origin env/dev

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: dev

  #--------------------------------------------------#
  #                  Trigger Manual                  # 
  #--------------------------------------------------#
  Trigger-Manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Trigger
        run: |
          git config --global user.name "pipeline-bot"
          git config --global user.email "pipeline-bot"
          git fetch
          git checkout -B env/${{steps.analysis.outputs.environment}}
          git commit --allow-empty -am "deploy: to ${{steps.analysis.outputs.environment}} [skip ci]\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/${{steps.analysis.outputs.environment}}

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          environment: ${{steps.analysis.outputs.environment}}


  #--------------------------------------------------#
  #                  Build: Node.js                  # 
  #--------------------------------------------------#
  Build-Node:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'deployment'
      && needs.Setup.outputs.Language == 'javascript'
    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: env/${{needs.Setup.outputs.Environment}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          docker-qmeu: true
          docker-buildx: true
      
      - name: Docs | Write summary title
        run: |
          echo "### 🚢 Build" >> $GITHUB_STEP_SUMMARY

      # pre-build
      - name: Create Dockerfile
        uses: filipeforattini/ff-iac-github-actions/.github/actions/create-dockerfile@main
        if: steps.analysis.outputs.feature_has_dockerfile != true
        with:
          writeSummary: true
          preset: node
          params: '{"tag": "${{inputs.nodeVersion}}-slim"}'

      - name: Create .dockerignore
        uses: filipeforattini/ff-iac-github-actions/.github/actions/create-dockerignore@main
        if: steps.analysis.outputs.feature_has_dockerignore != true
        with:
          writeSummary: true
          globsToIgnore: '["node_modules"]'

      # login
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      # build
      - name: Copy config
        run: |
          if test -f ./manifests/configs/${{needs.Setup.outputs.Environment}}.env; then cp ./manifests/configs/${{needs.Setup.outputs.Environment}}.env ./.env; fi

      - name: Build container image and push
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-docker-build@main
        with:
          cached: true
          platforms: ${{inputs.platforms}}
          containerRegistry: ${{inputs.containerRegistry}}


  #--------------------------------------------------#
  #                  Build: Python                   # 
  #--------------------------------------------------#
  Build-Python:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'deployment'
      && needs.Setup.outputs.Language == 'python'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: env/${{needs.Setup.outputs.Environment}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          docker-qmeu: true
          docker-buildx: true

      - name: Docs | Write summary title
        run: |
          echo "### 🚢 Build" >> $GITHUB_STEP_SUMMARY

      # pre-build
      - name: Create Dockerfile
        uses: filipeforattini/ff-iac-github-actions/.github/actions/create-dockerfile@main
        if: steps.analysis.outputs.feature_has_dockerfile != true
        with:
          writeSummary: true
          preset: python
          params: '{"tag": "${{inputs.pythonVersion}}"}'

      - name: Create .dockerignore
        uses: filipeforattini/ff-iac-github-actions/.github/actions/create-dockerignore@main
        if: steps.analysis.outputs.feature_has_dockerignore != true
        with:
          writeSummary: true

      # login
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      # build
      - name: Copy config
        run: |
          if test -f ./manifests/configs/${{needs.Setup.outputs.Environment}}.env; then cp ./manifests/configs/${{needs.Setup.outputs.Environment}}.env ./.env; fi

      - name: Build container image and push
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-docker-build@main
        with:
          cached: true
          platforms: ${{inputs.platforms}}
          containerRegistry: ${{inputs.containerRegistry}}


  #--------------------------------------------------#
  #                  Build: Go                       # 
  #--------------------------------------------------#
  Build-Go:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'deployment'
      && needs.Setup.outputs.Language == 'go'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: env/${{needs.Setup.outputs.Environment}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}
        
      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          docker-qmeu: true
          docker-buildx: true

      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Docs | Write summary title
        run: |
          echo "### 🚢 Build" >> $GITHUB_STEP_SUMMARY

      # login
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      # build
      - name: Copy config
        run: |
          if test -f ./manifests/configs/${{needs.Setup.outputs.Environment}}.env; then cp ./manifests/configs/${{needs.Setup.outputs.Environment}}.env ./.env; fi

      - name: Build container image and push
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-docker-build@main
        with:
          cached: true
          platforms: ${{inputs.platforms}}
          containerRegistry: ${{inputs.containerRegistry}}

  #--------------------------------------------------#
  #                      Deploy JS                   # 
  #--------------------------------------------------#
  Deploy-Node:
    runs-on: ubuntu-latest
    environment: ${{needs.Setup.outputs.Environment}}
    if: needs.Setup.outputs.Language == 'javascript'
    
    needs:
      - Setup
      - Build-Node

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
        
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          token: ${{secrets.PIPELINE_DEPLOY_TOKEN}}
          docker-qmeu: true
          docker-buildx: true
          kubectl: true
          ytt: true
          yq: true

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Config | Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "::set-output name=version::$NEXT_VERSION"

      - name: Config | Kubectl config file
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

      # dependencies
      - name: Create k8s dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/k8s-install-dependencies@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          cloneTools: false
          writeSummary: true
          version: ${{steps.versioning.outputs.version}}
          repository: ${{steps.analysis.outputs.repository}}
          namespace: ${{steps.analysis.outputs.deploy_namespace}}

      # configs
      - name: K8s create config-map
        if: steps.analysis.outputs.feature_has_configs 
        run: |
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-configs-keys.txt

      # secrets
      - name: Decrypt secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          gpg \
            --yes --batch --quiet --decrypt \
            --passphrase="${{secrets.GPG_PASSPHRASE}}" \
            --output ./manifests/k8s-secrets.env \
            ${{steps.analysis.outputs.deploy_secrets_file}}

      - name: K8s create secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get secret -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-secrets-keys.txt

      # secrets for registry auth
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      - name: Config | Gives runner access to docker config file 
        run: |
          sudo chown $(whoami):docker /home/$(whoami)/.docker/config.json
          cp /home/$(whoami)/.docker/config.json ./manifests/docker-config.json

      - name: K8s create registry-token secret
        run: kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} registry-token --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./manifests/docker-config.json --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # generate k8s manifests
      - name: K8s generates final yml
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo '' ; fi)
          ytt \
            -f ./.pipeline/deploy/as-k8s/service.schema.yml \
            -f ./.pipeline/deploy/as-k8s/service \
            -f ./manifests/k8s.yml \
            --data-value                                      ecosystem=${{steps.analysis.outputs.ecosystem}} \
            --data-value                                   organization=${{steps.analysis.outputs.organization}} \
            --data-value                                     repository=${{steps.analysis.outputs.repository}} \
            --data-value                                    environment=${{steps.analysis.outputs.environment}} \
            --data-value                              containerRegistry=${{inputs.containerRegistry}} \
            --data-value                                            tag=${{steps.analysis.outputs.deploy_tag}} \
            --data-value-yaml               deployment.imagePullSecrets=true \
            --data-value-yaml                            envFromSecrets="[$SECRETS_LIST]" \
            --data-value-yaml                         envFromConfigMaps="[$CONFIGS_LIST]" \
            --data-value-yaml                       envFromDependencies="[$DEPENDENCIES_LIST]" \
            --data-value                       pipelineControl.datetime=${{steps.analysis.outputs.executed_at}} \
            --data-value-yaml  pipelineControl.environmentsAsNamespaces=${{inputs.environmentsAsNamespaces}} \
              > ./manifests/k8s-to-apply.yml

      - name: Docs | K8s summary
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo ''; fi)
          echo -e "### k8s\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "| param | value |" >> $GITHUB_STEP_SUMMARY
          echo -e "| --- | :---: |" >> $GITHUB_STEP_SUMMARY
          echo -e "| secrets | $SECRETS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| configs | $CONFIGS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| dependencies | $DEPENDENCIES_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "<details><summary>📝 kubefile</summary>\n\n\`\`\`yml \n$(cat ./manifests/k8s-to-apply.yml)\n \`\`\`\n </details>\n\n" >> $GITHUB_STEP_SUMMARY

      - name: K8s apply yml
        run: |
          kubectl apply -f ./manifests/k8s-to-apply.yml
          kubectl get pods -n ${{steps.analysis.outputs.deploy_namespace}}


  #--------------------------------------------------#
  #                      Deploy PY                   # 
  #--------------------------------------------------#
  Deploy-Python:
    runs-on: ubuntu-latest

    environment: ${{needs.Setup.outputs.Environment}}

    if: needs.Setup.outputs.Language == 'python'
    
    needs:
      - Setup
      - Build-Python

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
        
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          docker-qmeu: true
          docker-buildx: true
          kubectl: true
          ytt: true
          yq: true

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Config | Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "::set-output name=version::$NEXT_VERSION"

      - name: Config | Kubectl config file
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

      # dependencies
      - name: Create k8s dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/k8s-install-dependencies@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          cloneTools: false
          writeSummary: true
          kubeConfig: ${{secrets.KUBE_CONFIG}}
          version: ${{steps.versioning.outputs.version}}
          repository: ${{steps.analysis.outputs.repository}}
          namespace: ${{steps.analysis.outputs.deploy_namespace}}

      # configs
      - name: K8s create config-map
        if: steps.analysis.outputs.feature_has_configs
        run: |
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-configs-keys.txt

      # secrets
      - name: Decrypt secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          gpg \
            --yes --batch --quiet --decrypt \
            --passphrase="${{secrets.GPG_PASSPHRASE}}" \
            --output ./manifests/k8s-secrets.env \
            ${{steps.analysis.outputs.deploy_secrets_file}}

      - name: K8s create secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get secret -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-secrets-keys.txt

      # secrets for registry auth
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      - name: Config | Gives runner access to docker config file 
        run: |
          sudo chown $(whoami):docker /home/$(whoami)/.docker/config.json
          cp /home/$(whoami)/.docker/config.json ./manifests/docker-config.json

      - name: K8s create registry-token secret
        run: kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} registry-token --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./manifests/docker-config.json --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # generate k8s manifests
      - name: K8s generates final yml
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo '' ; fi)
          ytt \
            -f ./.pipeline/deploy/as-k8s/service.schema.yml \
            -f ./.pipeline/deploy/as-k8s/service \
            -f ./manifests/k8s.yml \
            --data-value                                      ecosystem=${{steps.analysis.outputs.ecosystem}} \
            --data-value                                   organization=${{steps.analysis.outputs.organization}} \
            --data-value                                     repository=${{steps.analysis.outputs.repository}} \
            --data-value                                    environment=${{steps.analysis.outputs.environment}} \
            --data-value                              containerRegistry=${{inputs.containerRegistry}} \
            --data-value                                            tag=${{steps.analysis.outputs.deploy_tag}} \
            --data-value-yaml               deployment.imagePullSecrets=true \
            --data-value-yaml                            envFromSecrets="[$SECRETS_LIST]" \
            --data-value-yaml                         envFromConfigMaps="[$CONFIGS_LIST]" \
            --data-value-yaml                       envFromDependencies="[$DEPENDENCIES_LIST]" \
            --data-value                       pipelineControl.datetime=${{steps.analysis.outputs.executed_at}} \
            --data-value-yaml  pipelineControl.environmentsAsNamespaces=${{inputs.environmentsAsNamespaces}} \
              > ./manifests/k8s-to-apply.yml

      - name: Docs | K8s summary
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo ''; fi)
          echo -e "### k8s\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "| param | value |" >> $GITHUB_STEP_SUMMARY
          echo -e "| --- | :---: |" >> $GITHUB_STEP_SUMMARY
          echo -e "| secrets | $SECRETS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| configs | $CONFIGS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| dependencies | $DEPENDENCIES_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "<details><summary>📝 kubefile</summary>\n\n\`\`\`yml \n$(cat ./manifests/k8s-to-apply.yml)\n \`\`\`\n </details>\n\n" >> $GITHUB_STEP_SUMMARY

      - name: K8s apply yml
        run: |
          kubectl apply -f ./manifests/k8s-to-apply.yml
          kubectl get pods -n ${{steps.analysis.outputs.deploy_namespace}}

  #--------------------------------------------------#
  #                      Deploy Go                   # 
  #--------------------------------------------------#
  Deploy-Go:
    runs-on: ubuntu-latest

    environment: ${{needs.Setup.outputs.Environment}}

    if: needs.Setup.outputs.Language == 'go'
    
    needs:
      - Setup
      - Build-Go

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
        
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .pipeline
          repository: filipeforattini/ff-iac-github-actions

      - name: Setup | Dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          docker-qmeu: true
          docker-buildx: true
          kubectl: true
          ytt: true
          yq: true

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Config | Version
        id: versioning
        run: |
          NEXT_VERSION=$(git for-each-ref --sort=authordate --format '%(refname)' refs/tags | tail -n 1 | sed -n -e 's/^.*refs\/tags\/v//p')
          echo "next version = $NEXT_VERSION"
          echo "::set-output name=version::$NEXT_VERSION"

      - name: Config | Kubectl config file
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

      # dependencies
      - name: Create k8s dependencies
        uses: filipeforattini/ff-iac-github-actions/.github/actions/k8s-install-dependencies@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          cloneTools: false
          writeSummary: true
          kubeConfig: ${{secrets.KUBE_CONFIG}}
          version: ${{steps.versioning.outputs.version}}
          repository: ${{steps.analysis.outputs.repository}}
          namespace: ${{steps.analysis.outputs.deploy_namespace}}

      # configs
      - name: K8s create config-map
        if: steps.analysis.outputs.feature_has_configs
        run: |
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=${{steps.analysis.outputs.deploy_configs_file}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get configmap -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-configs-keys.txt

      # secrets
      - name: Decrypt secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          gpg \
            --yes --batch --quiet --decrypt \
            --passphrase="${{secrets.GPG_PASSPHRASE}}" \
            --output ./manifests/k8s-secrets.env \
            ${{steps.analysis.outputs.deploy_secrets_file}}

      - name: K8s create secrets
        if: steps.analysis.outputs.feature_has_secrets
        run: |
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}}-${{steps.versioning.outputs.version}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get secret -n ${{steps.analysis.outputs.deploy_namespace}} ${{steps.analysis.outputs.repository}} -o jsonpath='{.data}' | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-secrets-keys.txt

      # secrets for registry auth
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{inputs.containerRegistry}}
          username: ${{secrets.REGISTRY_USERNAME}}
          password: ${{secrets.REGISTRY_PASSWORD}}

      - name: Config | Gives runner access to docker config file 
        run: |
          sudo chown $(whoami):docker /home/$(whoami)/.docker/config.json
          cp /home/$(whoami)/.docker/config.json ./manifests/docker-config.json

      - name: K8s create registry-token secret
        run: kubectl create secret generic -n ${{steps.analysis.outputs.deploy_namespace}} registry-token --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./manifests/docker-config.json --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # generate k8s manifests
      - name: K8s generates final yml
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo '' ; fi)
          ytt \
            -f ./.pipeline/deploy/as-k8s/service.schema.yml \
            -f ./.pipeline/deploy/as-k8s/service \
            -f ./manifests/k8s.yml \
            --data-value                                      ecosystem=${{steps.analysis.outputs.ecosystem}} \
            --data-value                                   organization=${{steps.analysis.outputs.organization}} \
            --data-value                                     repository=${{steps.analysis.outputs.repository}} \
            --data-value                                    environment=${{steps.analysis.outputs.environment}} \
            --data-value                              containerRegistry=${{inputs.containerRegistry}} \
            --data-value                                            tag=${{steps.analysis.outputs.deploy_tag}} \
            --data-value-yaml               deployment.imagePullSecrets=true \
            --data-value-yaml                            envFromSecrets="[$SECRETS_LIST]" \
            --data-value-yaml                         envFromConfigMaps="[$CONFIGS_LIST]" \
            --data-value-yaml                       envFromDependencies="[$DEPENDENCIES_LIST]" \
            --data-value                       pipelineControl.datetime=${{steps.analysis.outputs.executed_at}} \
            --data-value-yaml  pipelineControl.environmentsAsNamespaces=${{inputs.environmentsAsNamespaces}} \
              > ./manifests/k8s-to-apply.yml

      - name: Docs | K8s summary
        run: |
          CONFIGS_LIST=$(if test -f ./manifests/k8s-configs-keys.txt; then cat ./manifests/k8s-configs-keys.txt; else echo ''; fi)
          SECRETS_LIST=$(if test -f ./manifests/k8s-secrets-keys.txt; then cat ./manifests/k8s-secrets-keys.txt; else echo ''; fi)
          DEPENDENCIES_LIST=$(if test -f ./manifests/k8s-dependencies.yml; then (cat ./manifests/k8s-dependencies.yml | yq -P '.dependencies'); else echo ''; fi)
          echo -e "### k8s\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "| param | value |" >> $GITHUB_STEP_SUMMARY
          echo -e "| --- | :---: |" >> $GITHUB_STEP_SUMMARY
          echo -e "| secrets | $SECRETS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| configs | $CONFIGS_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "| dependencies | $DEPENDENCIES_LIST |" >> $GITHUB_STEP_SUMMARY
          echo -e "<details><summary>📝 kubefile</summary>\n\n\`\`\`yml \n$(cat ./manifests/k8s-to-apply.yml)\n \`\`\`\n </details>\n\n" >> $GITHUB_STEP_SUMMARY

      - name: K8s apply yml
        run: |
          kubectl apply -f ./manifests/k8s-to-apply.yml
          kubectl get pods -n ${{steps.analysis.outputs.deploy_namespace}}